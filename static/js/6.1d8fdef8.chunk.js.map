{"version":3,"sources":["modules/facts/api/chuck-norris-api.js","modules/facts/components/fact-card.js","modules/facts/containers/category-page.js"],"names":["apiConfig","getCategories","a","async","fetch","method","res","json","getRandomCategoryJoke","category","Root","styled","div","Star","StarIcon","props","favorite","FactCard","text","id","dispatch","useFavouriteJokeDispatch","favoritedJoke","useFavouriteJoke","onClick","favoriteJokeActions","clearFavoriteJoke","setFavoriteJoke","joke","Text","color","variant","Styled","Title","Button","button","Link","adaptedGetRandomCategoryJoke","args","CategoryPage","useParams","useAsync","deferFn","isPending","isRejected","isResolved","data","run","useEffect","weight","align","value","disabled","to"],"mappings":"wNAAMA,EACC,mCAGMC,EAAgB,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACTE,MAAM,GAAD,OAAIJ,EAAJ,eAAgC,CACrDK,OAAQ,SAFiB,cACrBC,EADqB,yBAIpBA,EAAIC,QAJgB,sCAOhBC,EAAwB,6BAAAN,EAAAC,OAAA,uDAASM,EAAT,EAASA,SAAT,WAAAP,EAAA,MACjBE,MAAM,GAAD,OAAIJ,EAAJ,4BAAqCS,GAAY,CACtEJ,OAAQ,SAFyB,cAC7BC,EAD6B,yBAW5BA,EAAIC,QAXwB,uC,42CCDrC,IAAMG,EAAOC,IAAOC,IAAV,KA8BJC,EAAOF,YAAOG,IAAPH,CAAH,KAIC,SAAAI,GAAK,OAAKA,EAAMC,SAAW,OAAS,eA8BhCC,EA1BE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAClBC,EAAWC,cACXC,EAAgBC,cAEtB,OACE,kBAACb,EAAD,KACE,kBAAC,EAAD,CACEM,SAAUM,GAAiBA,EAAcH,KAAOA,EAChDK,QAAS,WACHF,GAAiBA,EAAcH,KAAOA,EACxCM,IAAoBC,kBAAkB,CAAEN,aAExCK,IAAoBE,gBAAgB,CAClCP,WACAQ,KAAM,CAAEV,OAAMC,WAKtB,kBAACU,EAAA,EAAD,CAAMC,MAAO,SAAUC,QAAS,MAC7Bb,K,+lBCxDT,IAAMc,EAAS,CACbtB,KAAMC,IAAOC,IAAT,KACJqB,MAAOtB,IAAOC,IAAT,KAKLsB,OAAQvB,IAAOwB,OAAT,KAUNC,KAAMzB,YAAOyB,IAAPzB,CAAF,MAMA0B,EAA+B,SAAAC,GAAI,OAAI9B,IAAqB,WAArB,cAAyB8B,KAmCvDC,UAlCM,WAAO,IACpB9B,EAAa+B,cAAb/B,SADmB,EAGgCgC,YAAS,CAChEC,QAASL,IADHM,EAHiB,EAGjBA,UAAWC,EAHM,EAGNA,WAAYC,EAHN,EAGMA,WAAYC,EAHlB,EAGkBA,KAAMC,EAHxB,EAGwBA,IAQjD,OAJAC,qBAAU,WACRD,EAAI,CAAEtC,eACL,CAACA,EAAUsC,IAGZ,kBAACf,EAAOtB,KAAR,KACE,kBAACsB,EAAOC,MAAR,KACE,kBAACJ,EAAA,EAAD,CAAME,QAAS,KAAMkB,OAAQ,IAAKnB,MAAO,SAAUoB,MAAO,UACvDzC,IAIJoC,GACC,oCACE,kBAAC,EAAD,CAAU3B,KAAM4B,EAAKK,MAAOhC,GAAI2B,EAAK3B,MAGxCwB,GAAa,kBAAC,IAAD,CAAezB,KAAM,iBAClC0B,GAAc,QACf,kBAACZ,EAAOE,OAAR,CAAekB,SAAUT,EAAWnB,QAAS,kBAAMuB,EAAI,CAAEtC,eAAzD,aAGA,kBAACuB,EAAOI,KAAR,CAAaiB,GAAI,KAAjB","file":"static/js/6.1d8fdef8.chunk.js","sourcesContent":["const apiConfig = {\n  url: 'https://api.chucknorris.io/jokes'\n};\n\nexport const getCategories = async () => {\n  const res = await fetch(`${apiConfig.url}/categories`, {\n    method: 'GET'\n  });\n  return res.json();\n};\n\nexport const getRandomCategoryJoke = async ({ category }) => {\n  const res = await fetch(`${apiConfig.url}/random?category=${category}`, {\n    method: 'GET'\n  });\n  // response\n  // {\n  //     \"icon_url\" : \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\",\n  //     \"id\" : \"SeCMmrO6SyacTp58ni71lw\",\n  //     \"url\" : \"https://api.chucknorris.io/jokes/SeCMmrO6SyacTp58ni71lw\"\n  //     \"value\" : \"Chuck Norris does not brush his teeth with a toothbrush and toothpaste. instead, he uses steel wool and hydrochloric acid.\"\n  // }\n  return res.json();\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../../core/components/Text';\nimport {\n  favoriteJokeActions,\n  useFavouriteJoke,\n  useFavouriteJokeDispatch\n} from '../contexts/favourite-joke-context';\nimport StarIcon from '@material-ui/icons/Star';\n\nconst Root = styled.div`\n  padding: 16px;\n  margin: 0 auto 32px;\n  background-color: white;\n  border-radius: 4px;\n  height: 360px;\n  width: 280px;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:before,\n  &:after {\n    position: absolute;\n    font-size: 58px;\n    font-family: cursive;\n    color: orange;\n  }\n  &:before {\n    top: 16px;\n    left: 16px;\n    content: '\\\\201C';\n  }\n  &:after {\n    bottom: 16px;\n    right: 16px;\n    content: '\\\\201D';\n  }\n`;\n\nconst Star = styled(StarIcon)`\n  position: absolute;\n  right: 16px;\n  top: 16px;\n  color: ${props => (props.favorite ? 'gold' : 'lightgray')};\n  cursor: pointer;\n`;\n\nconst FactCard = ({ text, id }) => {\n  const dispatch = useFavouriteJokeDispatch();\n  const favoritedJoke = useFavouriteJoke();\n\n  return (\n    <Root>\n      <Star\n        favorite={favoritedJoke && favoritedJoke.id === id}\n        onClick={() => {\n          if (favoritedJoke && favoritedJoke.id === id) {\n            favoriteJokeActions.clearFavoriteJoke({ dispatch });\n          } else {\n            favoriteJokeActions.setFavoriteJoke({\n              dispatch,\n              joke: { text, id }\n            });\n          }\n        }}\n      />\n      <Text color={'orange'} variant={'h4'}>\n        {text}\n      </Text>\n    </Root>\n  );\n};\n\nexport default FactCard;\n","import React, { Suspense, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { useAsync } from 'react-async';\nimport { getRandomCategoryJoke } from '../api/chuck-norris-api';\nimport Text from '../../core/components/Text';\nimport FactCard from '../components/fact-card';\nimport { useFavouriteJokeDispatch } from '../contexts/favourite-joke-context';\nimport LoadingInline from '../../core/components/loading-inline';\nimport ErrorBoundary from '../../core/components/ErrorBoundary';\n\nconst Styled = {\n  Root: styled.div``,\n  Title: styled.div`\n    margin: 0 -16px 32px;\n    padding: 16px;\n    background-color: bisque;\n  `,\n  Button: styled.button`\n    padding: 8px;\n    margin: 8px auto;\n    background-color: orange;\n    color: white;\n    display: block;\n    font-weight: 700;\n    font-size: 18px;\n    min-width: 240px;\n  `,\n  Link: styled(Link)`\n    display: block;\n    text-align: center;\n  `\n};\n\nconst adaptedGetRandomCategoryJoke = args => getRandomCategoryJoke(...args);\nconst CategoryPage = () => {\n  let { category } = useParams();\n\n  const { isPending, isRejected, isResolved, data, run } = useAsync({\n    deferFn: adaptedGetRandomCategoryJoke\n  });\n\n  useEffect(() => {\n    run({ category });\n  }, [category, run]);\n\n  return (\n    <Styled.Root>\n      <Styled.Title>\n        <Text variant={'h2'} weight={700} color={'orange'} align={'center'}>\n          {category}\n        </Text>\n      </Styled.Title>\n\n      {isResolved && (\n        <>\n          <FactCard text={data.value} id={data.id} />\n        </>\n      )}\n      {isPending && <LoadingInline text={'Loading joke'} />}\n      {isRejected && 'error'}\n      <Styled.Button disabled={isPending} onClick={() => run({ category })}>\n        LOAD NEXT\n      </Styled.Button>\n      <Styled.Link to={'/'}>Back to home</Styled.Link>\n    </Styled.Root>\n  );\n};\n\nexport default CategoryPage;\n"],"sourceRoot":""}