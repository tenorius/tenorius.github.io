{"version":3,"sources":["modules/core/components/Text.js","modules/core/components/loading-inline.js","modules/core/components/ErrorBoundary.js","modules/facts/assets/chuck_norris_PNG1.png","serviceWorker.js","modules/core/core-router.js","modules/core/components/main-logo.js","modules/core/containers/App.js","modules/core/core-module.js","index.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","body1","body2","caption","Root","styled","div","props","color","weight","css","bottomSpacing","align","Text","variant","children","className","as","defaultProps","LoadingInline","text","useState","label","setLabel","ellipsisCount","useRef","useEffect","referece","setInterval","count","localEllipsisCount","ellipsisAnimation","current","clearInterval","p","ErrorBoundary","state","hasError","this","error","React","Component","module","exports","Boolean","window","location","hostname","match","FactsModule","lazy","CoreRouter","fallback","path","render","Styled","Image","MainLogo","src","chuckImage","main","App","CoreModule","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5d78db6.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  body1: 'p',\n  body2: 'p',\n  caption: 'span'\n};\n\nconst Root = styled.div`\n  &.typography-h1 {\n    font-size: 2rem;\n    font-weight: 700;\n  }\n  &.typography-h2 {\n    font-size: 1.75rem;\n    font-weight: 700;\n  }\n  &.typography-h3 {\n    font-size: 1.5rem;\n    font-weight: 700;\n  }\n  &.typography-h4 {\n    font-size: 1.25rem;\n    font-weight: 700;\n  }\n  &.typography-h5 {\n    font-size: 1.125rem;\n    font-weight: 700;\n  }\n  &.typography-h6 {\n    font-size: 1rem;\n    font-weight: 700;\n  }\n  &.typography-body1 {\n    font-size: 1rem;\n    font-weight: 300;\n  }\n  &.typography-body2 {\n    font-size: 0.75rem;\n    font-weight: 300;\n  }\n\n  margin-bottom: 0;\n  margin-top: 0;\n\n  && {\n    color: ${props => props.color};\n    ${props =>\n      props.weight &&\n      css`\n        font-weight: ${props.weight};\n      `};\n    ${props =>\n      props.bottomSpacing &&\n      css`\n        margin-bottom: ${props.bottomSpacing}px;\n      `};\n    text-align: ${props => props.align};\n  }\n`;\n\nconst Text = ({ variant, children, className, ...props }) => {\n  return (\n    <Root\n      {...props}\n      as={tagMap[variant]}\n      className={`typography-${variant} ${className}`}\n    >\n      {children}\n    </Root>\n  );\n};\n\nText.propTypes = {\n  variant: PropTypes.oneOf([\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'body1',\n    'body2',\n    'caption'\n  ]),\n  color: PropTypes.string,\n  weight: PropTypes.oneOf([300, 500, 700]),\n  align: PropTypes.oneOf(['center', 'right', 'left']),\n  className: PropTypes.string\n};\n\nText.defaultProps = {\n  variant: 'body1',\n  color: 'black',\n  align: 'left',\n  className: ''\n};\n\nexport default Text;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  color: white;\n  font-size: 28px;\n  font-weight: 700;\n  text-align: center;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ellipsisAnimation = (count, text) => {\n  let localEllipsisCount;\n  if (count === 0) {\n    localEllipsisCount = '.';\n  } else if (count === 1) {\n    localEllipsisCount = '..';\n  } else {\n    localEllipsisCount = '...';\n  }\n  return `${text}${localEllipsisCount}`;\n};\n\nconst LoadingInline = ({ text }) => {\n  const [label, setLabel] = useState(text);\n  const ellipsisCount = useRef(0);\n\n  useEffect(() => {\n    const referece = setInterval(() => {\n      setLabel(ellipsisAnimation(ellipsisCount.current, text));\n      ellipsisCount.current = (ellipsisCount.current + 1) % 3;\n    }, 200);\n    return () => clearInterval(referece);\n  }, [label, text]);\n  return <Root>{label}</Root>;\n};\n\nexport default LoadingInline;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.p`\n  color: red;\n  text-align: center;\n`;\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <Root>Loading failed! Please reload.</Root>;\n    }\n\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n","module.exports = __webpack_public_path__ + \"static/media/chuck_norris_PNG1.edea891d.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. FactsModule is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport LoadingInline from './components/loading-inline';\n\nconst FactsModule = lazy(() => import('../facts/facts-module'));\n\nconst CoreRouter = () => {\n  return (\n    <Router>\n      <ErrorBoundary>\n        <Suspense fallback={<LoadingInline text={'Suspense loading'} />}>\n          <Switch>\n            <Route path=\"/\" render={props => <FactsModule {...props} />} />\n          </Switch>\n        </Suspense>\n      </ErrorBoundary>\n    </Router>\n  );\n};\nexport default CoreRouter;\n","import React from 'react';\nimport styled from 'styled-components';\nimport chuckImage from '../../facts/assets/chuck_norris_PNG1.png';\nimport Text from './Text';\n\nconst Styled = {\n  Root: styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    margin-bottom: 32px;\n  `,\n  Image: styled.div`\n    height: 200px;\n    width: 200px;\n    padding: 20px;\n    margin: 0 auto;\n    background: radial-gradient(yellow, transparent);\n    border-radius: 50%;\n    img {\n      height: 100%;\n      width: auto;\n    }\n  `,\n  Text: styled(Text)`\n    && {\n      font-size: 4rem;\n    }\n    font-style: italic;\n  `\n};\n\nfunction MainLogo() {\n  return (\n    <Styled.Root>\n      <Styled.Image>\n        <img src={chuckImage} />\n      </Styled.Image>\n      <Styled.Text variant={'h1'} color={'white'} align={'center'}>\n        Chuck Norris Facts\n      </Styled.Text>\n    </Styled.Root>\n  );\n}\n\nexport default MainLogo;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport styled from 'styled-components';\nimport MainLogo from '../components/main-logo';\n\nconst Root = styled.main`\n  padding: 16px;\n  background-color: sandybrown;\n  font-family: Roboto;\n  * {\n    box-sizing: border-box;\n  }\n`;\nfunction App({ children }) {\n  return (\n    <Root>\n      <MainLogo />\n      {children}\n    </Root>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport CoreRouter from './core-router';\nimport App from './containers/App';\n\nconst CoreModule = () => {\n  return (\n    <App>\n      <CoreRouter />\n    </App>\n  );\n};\n\nexport default CoreModule;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CoreModule from './modules/core/core-module';\n\nReactDOM.render(<CoreModule />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}